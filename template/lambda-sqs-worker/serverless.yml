service: <%- serviceName %>

configValidationMode: error

params:
  default:
    datadogApiKeySecretArn: 'TODO: arn:aws:secretsmanager:${aws:region}:${aws:accountId}:secret:SECRET-NAME'
    description: <%- description %>
  dev:
    deploymentBucket: 'TODO: deployment-bucket-name'
    isProduction: false
  prod:
    deploymentBucket: 'TODO: deployment-bucket-name'
    isProduction: true

custom:
  datadog:
    addLayers: false
    apiKeySecretArn: ${param:datadogApiKeySecretArn}
    enableDDLogs: false
    # TODO: enable Datadog extension
    enabled: false
    exclude:
      - WorkerPreHook
    injectLogContext: false
    version: ${env:VERSION}
  prune:
    automatic: true
    number: 3

plugins:
  - serverless-plugin-canary-deployments
  - serverless-plugin-datadog
  - serverless-prune-plugin

provider:
  logRetentionInDays: 30
  name: aws
  region: ap-southeast-2
  runtime: nodejs18.x
  architecture: <%- lambdaServerlessArchitecture %>
  deploymentMethod: direct
  stackName: ${self:service}
  stage: ${env:ENVIRONMENT}
  deploymentBucket:
    # Use a shared account-level bucket for Lambda bundles and other artefacts.
    # This is easier to manage in terms of access, deployment, and tagging.
    name: ${param:deploymentBucket}
  environment:
    NODE_ENV: production
    # https://nodejs.org/api/cli.html#cli_node_options_options
    NODE_OPTIONS: --enable-source-maps
  iam:
    role:
      statements:
        - Action:
            - kms:Decrypt
            - kms:GenerateDataKey*
          Effect: Allow
          Resource: !GetAtt EncryptionKey.Arn
        - Action: lambda:InvokeFunction
          Effect: Allow
          Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:functions.Worker.name}
        - Action: secretsmanager:GetSecretValue
          Effect: Allow
          Resource: ${param:datadogApiKeySecretArn}-??????
        - Action: sns:Publish
          Effect: Allow
          Resource: !Ref DestinationTopic
  stackTags:
    # TODO: add data classification tags
    # https://rfc.skinfra.xyz/RFC019-AWS-Tagging-Standard.html#seekdataconsumers
    # seek:data:consumers: internal
    # https://rfc.skinfra.xyz/RFC019-AWS-Tagging-Standard.html#seekdatatypes
    # seek:data:types:restricted: job-ads
    seek:env:label: ${env:ENVIRONMENT}
    seek:env:production: ${param:isProduction}
    seek:owner:team: '<%- teamName %>'
    seek:source:sha: ${env:BUILDKITE_COMMIT, 'na'}
    seek:source:url: 'https://github.com/SEEK-Jobs/<%- repoName %>'

package:
  patterns:
    - '!**'
    - lib/**
    - node_modules/**

functions:
  Worker:
    name: ${self:service}
    handler: lib/app.handler
    description: ${param:description}
    memorySize: 128
    reservedConcurrency: 20
    timeout: 30
    deploymentSettings:
      type: AllAtOnce
      alias: Live
      preTrafficHook: WorkerPreHook
    environment:
      ENVIRONMENT: ${env:ENVIRONMENT}
      SERVICE: ${self:service}
      VERSION: ${env:VERSION, 'local'}

      DESTINATION_SNS_TOPIC_ARN: !Ref DestinationTopic
    events:
      - sqs:
          arn: !GetAtt MessageQueue.Arn
          batchSize: 1
  WorkerPreHook:
    name: ${self:functions.Worker.name}-pre-hook
    handler: lib/hooks.pre
    memorySize: 128
    # This is generous because a timeout will hang the deployment
    timeout: 300
    environment:
      FUNCTION_NAME_TO_INVOKE: ${self:functions.Worker.name}

resources:
  # This becomes the Lambda application's description
  Description: ${param:description}

  Resources:
    DeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        MessageRetentionPeriod: 1209600
        KmsDataKeyReusePeriodSeconds: 300
        KmsMasterKeyId: !Ref EncryptionKey
        QueueName: ${self:service}-dead-letters

    MessageQueue:
      Type: AWS::SQS::Queue
      Properties:
        MessageRetentionPeriod: 1209600
        KmsDataKeyReusePeriodSeconds: 300
        KmsMasterKeyId: !Ref EncryptionKey
        QueueName: ${self:service}-messages
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
          maxReceiveCount: 3
        VisibilityTimeout: 180

    # MessageQueuePolicy:
    #   Type: AWS::SQS::QueuePolicy
    #   Properties:
    #     PolicyDocument:
    #       Version: '2012-10-17'
    #       Statement:
    #         - Action: sqs:SendMessage
    #           Condition:
    #             ArnEquals:
    #               aws:SourceArn: 'TODO: sourceSnsTopicArn'
    #           Effect: 'Allow'
    #           Principal:
    #             AWS: '*'
    #           Resource: '*'
    #     Queues:
    #       - !Ref MessageQueue

    # TopicSubscription:
    #   Type: AWS::SNS::Subscription
    #   Properties:
    #     Endpoint: !GetAtt MessageQueue.Arn
    #     Protocol: sqs
    #     RawMessageDelivery: true
    #     TopicArn: 'TODO: sourceSnsTopicArn'

    DestinationTopic:
      Type: AWS::SNS::Topic
      Properties:
        KmsMasterKeyId: alias/aws/sns
        TopicName: ${self:service}

    EncryptionKey:
      Type: AWS::KMS::Key
      Properties:
        Description: ${self:service}
        EnableKeyRotation: true
        KeyPolicy:
          Version: '2012-10-17'
          Statement:
            - Sid: Admin access
              Effect: Allow
              Action: kms:*
              Principal:
                AWS: !Ref AWS::AccountId
              Resource: '*'
            - Sid: SNS compatibility
              Effect: Allow
              Action:
                - kms:Decrypt
                - kms:GenerateDataKey*
              Principal:
                Service: sns.amazonaws.com
              Resource: '*'

    EncryptionKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/seek/${self:service}
        TargetKeyId: !Ref EncryptionKey
